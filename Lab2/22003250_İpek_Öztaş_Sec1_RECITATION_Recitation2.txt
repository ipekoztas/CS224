CS224
Recitation 2 
Section 1.
İpek Öztaş
22003250
13.3.2023

PART1
.data

prompt1: 	.asciiz "\nEnter a value: "
hex1:		.asciiz "\nHex value of the first register: "
hex2:		.asciiz "\nHex value of the second register: "
finalPrompt:	.asciiz "\nEnter 1 to continue, 0 to quit: "
result:		.asciiz "\nHamming distance calculated is: "
ans1:	.space 32
ans2:	.space 32

.text

main:

	jal promptUser
	move $s0, $v0	#reg value1 
		
	jal promptUser
	move $s1, $v0	#reg value 2
	
	la $a0, hex1
	li $v0, 4
	syscall
	
	move $a0, $s0
	la $a1, ans1
	jal convertHex
	
	la $a0, ans1
	li $v0, 4 
	syscall 
	
	la $a0, hex2
	li $v0, 4
	syscall

	move $a0, $s1
	la $a1, ans2
	jal convertHex
	
	la $a0, ans2
	li $v0, 4 
	syscall 
	
	la $a0, ans1
	la $a1, ans2
	jal calculateDistance
	move $s2, $v0	#result
	#hamming distance is calculated in hexadecimal form
	
	
	la $a0, result
	li $v0, 4
	syscall
	
	li $v0, 1
	move $a0, $s2
	syscall
	
	la $a0, finalPrompt
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	move $t0, $v0
	beq $t0, $0, exit
	jal main
	
	exit:
		li $v0, 10
		syscall

promptUser:

	la $a0, prompt1
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	
	jr $ra
	
calculateDistance:

	addi $sp, $sp, -24
	sw $s3, 20($sp)
	sw $s2, 16($sp)
	sw $s1, 12($sp)
	sw $s0, 8($sp)
	sw $t1, 4($sp)
	sw $t0, 0($sp)
	

	li $s0, 8 #array size
	move $s1, $a0	#array1 address
	move $s2, $a1 	#array2 address
	li $s3, 0	#count 
	
	compare:
		beq $s0, $0, finishCal
		lw $t0, 0($s1) #array1 element
		lw $t1, 0($s2) #array2 element
		beq $t0, $t1, continue
		addi $s3, $s3, 1
	continue:
		addi $s1, $s1, 4
		addi $s2, $s2, 4
		addi $s0, $s0, -1
		j compare
	finishCal:
		move $v0, $s3
		
	lw $s3, 20($sp)
	lw $s2, 16($sp)
	lw $s1, 12($sp)
	lw $s0, 8($sp)
	lw $t1, 4($sp)
	lw $t0, 0($sp)
	addi $sp, $sp, 24
	jr $ra
	
convertHex:
	addi $sp,$sp -28
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t4, 16($sp)
	sw $t5, 20$sp)
	sw $t6, 24($sp)

	li $t0, 8 #number of digits
	move $t1, $a0	#number to be converted
	move $t2, $a1 #hex value address
	li $t4 , 9
	li $t5, 55
	li $t6, 48


loophex: beq $t0, $0, exithex 
	rol $t1, $t1, 4 
	and $t3, $t1, 0xf 
	ble $t3, $t4, sumhex
	add $t3, $t3, $t5 
	b endhex

sumhex: add $t3, $t3, $t6
  
endhex: sb $t3, 0($t2)
	addi $t0, $t0, -1
	addi $t2, $t2, 1  
	j loophex
exithex: 	

	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	lw $t3, 12($sp)
	lw $t4, 16($sp)
	lw $t5, 20$sp)
	lw $t6, 24($sp)
	addi $sp,$sp 28
	
	jr $ra


PART2

.data
prompt1:	.asciiz "Enter the number of elements: \n"
prompt2:	.asciiz "Enter the element: \n"
prompt3:	.asciiz "Enter index: \n"
result:		.asciiz "The number of occurrences of the array element that occurs at the given position is: "
finalPrompt:	.asciiz "\nEnter 0 to quit: "
.text

main:
	promptUser:
	la $a0, prompt1
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	
	ble $v0, $zero, promptUser	#arraysize > 0
	
	# $a1 holds the array size 
	move $a1, $v0 
	
	jal createArray
	#a2 array1 address
	move $a2, $v0 
	
	getIndex:
	la $a0, prompt3
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	blt $v0, $zero, getIndex	# arraysize > index >= 0
	bge $v0, $a1, getIndex
	
	move $a3, $v0	#index
	
	jal findOccurrences
	move $s0, $v0
	
	la $a0, result
	li $v0, 4
	syscall
	
	li $v0, 1
	move $a0, $s0
	syscall
	
	la $a0, finalPrompt
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	move $t0, $v0
	beq $t0, $0, exit
	jal getIndex
	
	exit:
		li $v0, 10
		syscall
createArray:
	addi $sp, $sp, -8
	sw $s0, 4($sp)

	
	# $a1 = arraysize
	
	move $s0, $a1
	mul $s0, $s0, 4
	
	li $v0, 9
	move $a0, $s0
	syscall
	
	move $a0, $v0		# array address
	
	#save $ra
	sw $ra, 0($sp)
	jal initializeArray
	lw $ra, 0($sp)
	
	move $v0, $a0
	lw $s0, 4($sp)
	addi $sp, $sp, 8
	
	jr $ra
	
initializeArray:
	#input arraysize($a1) and array address($a0)
	addi $sp, $sp, -12
	sw $a0, 8($sp)
	sw $s0, 4($sp)
	sw $s1, 0($sp)

	move $s1, $a0
	move $s0, $a1
	
	getInput:
		li $v0, 4
		la $a0, prompt2
		syscall
	
		li $v0, 5
		syscall
		
		sw $v0, 0($s1)		# store the element into memory
		addi $s1, $s1, 4
		addi $s0, $s0, -1
		bne $s0, $zero, getInput

	lw $a0, 8($sp)
	lw $s0, 4($sp)
	lw $s1, 0($sp)
	addi $sp, $sp, 12
	jr $ra
	
findOccurrences:

	addi $sp, $sp, -24
	sw $s0, 20($sp)
	sw $s1, 16($sp)
	sw $t0, 12($sp)
	sw $t1, 8($sp)
	sw $t2, 4($sp)
	sw $t3, 0($sp)
	

	move $s0, $a2	#array address
	move $s1, $a1	#array size
	
	li $t0, 0	#count
	move $t1, $a3	#index
	mul $t1, $t1, 4	#byte
	add $s0, $s0, $t1
	lw $t2, ($s0)	#wanted element
	sub $s0, $s0, $t1
	
	
	compare:
		beq $s1, $0, finishCal
		lw $t3, 0($s0) #array element
		bne $t3, $t2, continue
		addi $t0, $t0, 1
	continue:
		addi $s0, $s0, 4
		addi $s1, $s1, -1
		j compare
	finishCal:
		move $v0, $t0
		

	lw $s0, 20($sp)
	lw $s1, 16($sp)
	lw $t0, 12($sp)
	lw $t1, 8($sp)
	lw $t2, 4($sp)
	lw $t3, 0($sp)
	addi $sp, $sp, 24
	jr $ra